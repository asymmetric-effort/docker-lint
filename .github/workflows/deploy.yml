# file: .github/workflows/deploy.yml
# (c) 2025 Asymmetric Effort, LLC. scaldwell@asymmetric-effort.com

name: Build and Deploy Docs

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Install dependencies
        run: go mod tidy
      - name: Check formatting
        run: test -z "$(gofmt -l .)"
      - name: Lint
        run: |
          go vet ./...
          command -v staticcheck || go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...
      - name: Unit tests
        run: go test ./... -short -cover
      - name: Integration tests
        run: |
          go test ./... -run Integration -covermode=atomic -coverpkg=./... -coverprofile=coverage.out
          go tool cover -func=coverage.out | awk '/total:/ { print; if ($3+0 < 80) exit 1 }'

  sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs:
      - test
      - sast
    strategy:
      fail-fast: false
      matrix:
        goos: [ linux, windows, darwin ]
        goarch: [ amd64, arm64, arm64be ]
        exclude:
          - goos: windows
            goarch: arm64be
          - goos: darwin
            goarch: arm64be
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - name: Build
        run: |
          if go tool dist list | grep -q "${{ matrix.goos }}/${{ matrix.goarch }}"; then
            GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -trimpath -ldflags "-s -w" -o build/${{ matrix.goos }}_${{ matrix.goarch }}/docker-lint ./cmd/docker-lint
          else
            echo "Skipping unsupported platform ${{ matrix.goos }}/${{ matrix.goarch }}"
          fi
      - name: Upload artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: docker-lint-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/${{ matrix.goos }}_${{ matrix.goarch }}/docker-lint
  
  package-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Run tests
        run: go test ./...
      - name: Import GPG signing keys
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_SIGNING_KEY_CI_PRIVATE }}
          GPG_PUBLIC_KEY: ${{ secrets.GPG_SIGNING_KEY_CI_PUBLIC }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "$GPG_PUBLIC_KEY" | gpg --batch --import
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  website-deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Pages
    permissions:
      contents: read
      deployments: write
    #needs:
    #  - package-release
    steps:
        - uses: actions/checkout@v5
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.x'
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install markdown
        - name: Build documentation
          run: |
            python scripts/build_docs.py --output dist --commit $GITHUB_SHA
        - name: Deploy
          uses: cloudflare/wrangler-action@v3
          with:
            apiToken: ${{ secrets.CLOUDFLARE_PAGES_API_TOKEN }}
            accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
            command: pages deploy dist --project-name=${{ vars.CLOUDFLARE_PAGES_PROJECT }}
            gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  post-deploy-verification:
    needs: website-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser
          python -m pip install --upgrade pip
          pip install selenium webdriver-manager
      - name: Verify deployment
        env:
          VERIFY_URL: https://docker-lint.asymmetric-effort.com
        run: |
          python scripts/verify_deploy.py $GITHUB_SHA
